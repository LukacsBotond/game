// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----- //
// blink //
// ----- //

#define blink_wrap_target 0
#define blink_wrap 0

static const uint16_t blink_program_instructions[] = {
            //     .wrap_target
    0x7f08, //  0: out    pins, 8                [31]
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program blink_program = {
    .instructions = blink_program_instructions,
    .length = 1,
    .origin = -1,
};

static inline pio_sm_config blink_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + blink_wrap_target, offset + blink_wrap);
    return c;
}

static inline void blink_program_init(PIO pio, uint stma, uint offset, uint pin, uint freq)
{
    pio_sm_config c = blink_program_get_default_config(offset);
    for (int i = pin; i < pin + 8; i++)
        pio_gpio_init(pio, i);
    pio_sm_set_consecutive_pindirs(pio, stma, pin, 8, true);
    sm_config_set_set_pins(&c, pin, 5);
    sm_config_set_out_pins(&c, pin, 8);
    sm_config_set_out_shift(&c,true,true,8);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    // clock
    float div = clock_get_hz(clk_sys) / (freq * 2);
    sm_config_set_clkdiv_int_frac(&c, 0xffff,0);
    pio_sm_init(pio, stma, offset, &c);
    //pio_sm_set_enabled(pio, stma, true);
    printf("Blinking pin %d at %d Hz, div: %f\n", pin, freq, c.clkdiv);
}

#endif

